http://www.codeskulptor.org/#user23_ohuzngVSzQ_7.py# Implementation of classic arcade game Pongimport simpleguiimport random# initialize globals - pos and vel encode vertical info for paddlesWIDTH = 600HEIGHT = 400       BALL_RADIUS = 20PAD_WIDTH = 8PAD_HEIGHT = 80HALF_PAD_WIDTH = PAD_WIDTH / 2HALF_PAD_HEIGHT = PAD_HEIGHT / 2LEFT = FalseRIGHT = TrueACCEL=10ball_pos=[WIDTH/2,HEIGHT/2]ball_vel=[0,0]# initialize ball_pos and ball_vel for new bal in middle of table# if direction is RIGHT, the ball's velocity is upper right, else upper leftdef spawn_ball(direction):    global ball_pos, ball_vel # these are vectors stored as lists        ball_pos[0]=WIDTH/2    ball_pos[1]=HEIGHT/2    # velocity RIGHT    if direction:        ball_vel[0]=random.randrange(120,240)/50        ball_vel[1]=-random.randrange(60,180)/50    else:        ball_vel[0]=-random.randrange(120,240)/50        ball_vel[1]=random.randrange(60,180)/50         # define event handlersdef new_game():    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers    global score1, score2  # these are ints            paddle1_pos=HEIGHT/2    paddle2_pos=HEIGHT/2        paddle1_vel=0    paddle2_vel=0        spawn_ball(LEFT)        score1=0    score2=0def draw(c):    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel             # draw mid line and gutters    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")            # update ball    ball_pos[0] += ball_vel[0]    ball_pos[1] += ball_vel[1]            # collision to the left gutter     if ball_pos[0] <= (BALL_RADIUS + PAD_WIDTH):       # check for left paddle       if paddle1_pos - HALF_PAD_HEIGHT <= ball_pos[1] and ball_pos[1] <= paddle1_pos + HALF_PAD_HEIGHT:           ball_vel[0] = -ball_vel[0] * 1.1           ball_vel[1] = ball_vel[1] * 1.1       else:           score2 += 1                spawn_ball(RIGHT)    # collision to the right gutter        if ball_pos[0] >= (WIDTH-1)-(BALL_RADIUS + PAD_WIDTH):       # check for right paddle        if paddle2_pos - HALF_PAD_HEIGHT <= ball_pos[1] and ball_pos[1] <= paddle2_pos + HALF_PAD_HEIGHT:            ball_vel[0] = -ball_vel[0] * 1.1            ball_vel[1] = ball_vel[1] * 1.1        else:            score1 += 1                 spawn_ball(LEFT)            # collision to the top    if ball_pos[1] <= (BALL_RADIUS):        ball_vel[1]=-ball_vel[1]            # collision to the bottom    if ball_pos[1] >=(HEIGHT-1) - (BALL_RADIUS):        ball_vel[1]=-ball_vel[1]            # draw ball    c.draw_circle(ball_pos, BALL_RADIUS, 1 , "yellow", "yellow")    # update paddle's vertical position, keep paddle on the screen    if paddle1_pos > HEIGHT - 1 - HALF_PAD_HEIGHT:        paddle1_pos= HEIGHT -1 - HALF_PAD_HEIGHT    elif  paddle1_pos <  HALF_PAD_HEIGHT:        paddle1_pos= HALF_PAD_HEIGHT    else:         paddle1_pos += paddle1_vel    if paddle2_pos > HEIGHT - 1 - HALF_PAD_HEIGHT:        paddle2_pos= HEIGHT -1 - HALF_PAD_HEIGHT    elif  paddle2_pos <  HALF_PAD_HEIGHT:        paddle2_pos= HALF_PAD_HEIGHT    else:         paddle2_pos += paddle2_vel                # draw paddles        #draw left paddle paddle1    up_p1 = paddle1_pos - HALF_PAD_HEIGHT    down_p1 = paddle1_pos + HALF_PAD_HEIGHT       c.draw_polygon([[0,up_p1], [PAD_WIDTH, up_p1], [0, down_p1], [PAD_WIDTH, down_p1]], 12, 'green')    #draw left paddle paddle2    up_p2 = paddle2_pos - HALF_PAD_HEIGHT    down_p2 = paddle2_pos + HALF_PAD_HEIGHT       c.draw_polygon([[WIDTH-1-PAD_WIDTH,up_p2], [WIDTH-1, up_p2], [WIDTH-1-PAD_WIDTH, down_p2], [WIDTH-1, down_p2]], 12, 'green')        # draw scores    c.draw_text(str(score1), (200, 70), 36, 'Aqua')    c.draw_text(str(score2), (400, 70), 36, 'Aqua')    def keydown(key):    global paddle1_vel, paddle2_vel        #paddle1 up    if key == simplegui.KEY_MAP['w']:        paddle1_vel=-ACCEL        #paddle1 down    if key == simplegui.KEY_MAP['s']:        paddle1_vel=ACCEL        #paddle2 up    if key == simplegui.KEY_MAP['up']:        paddle2_vel=-ACCEL        #paddle2 down    if key == simplegui.KEY_MAP['down']:        paddle2_vel=ACCEL       def keyup(key):    global paddle1_vel, paddle2_vel        #paddle1 up or down    if key == simplegui.KEY_MAP['w'] or key == simplegui.KEY_MAP['s']:        paddle1_vel =0        #paddle1 up or down    if key == simplegui.KEY_MAP['up'] or key == simplegui.KEY_MAP['down']:        paddle2_vel =0    # create frameframe = simplegui.create_frame("Pong", WIDTH, HEIGHT)frame.set_draw_handler(draw)frame.set_keydown_handler(keydown)frame.set_keyup_handler(keyup)frame.add_button("Restart",new_game)# start framenew_game()frame.start()