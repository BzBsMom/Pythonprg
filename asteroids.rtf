{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Cambria;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;}
{\info
{\author Luis Bravo}}\vieww13440\viewh15400\viewkind1\viewscale150
\deftab720
\pard\pardeftab720\ri0
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user26_Rte31HPdhK_5.py"}}{\fldrslt 
\f0\fs24 \cf2 \ul \ulc2 http://www.codeskulptor.org/#user26_Rte31HPdhK_15.py}}
\f1\fs24 \
\pard\pardeftab720\ri0

\f0 \cf0 # program template for Spaceship\
import simplegui\
import math\
import random\
\
# globals for user interface\
WIDTH = 800\
HEIGHT = 600\
score = 0\
lives = 3\
time = 0.5\
started = False\
ANG_VEL= 0.03\
C_ACCEL = 0.05\
FRICTION = 0.01\
MISSILE_SPD = 5\
GRACE_RANGE = 90\
SCORE_THRESHOLD = 100\
SPEED_SCORE_INC = 0.6\
\
class ImageInfo:\
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):\
        self.center = center\
        self.size = size\
        self.radius = radius\
        if lifespan:\
            self.lifespan = lifespan\
        else:\
            self.lifespan = float('inf')\
        self.animated = animated\
\
    def get_center(self):\
        return self.center\
\
    def get_size(self):\
        return self.size\
\
    def get_radius(self):\
        return self.radius\
\
    def get_lifespan(self):\
        return self.lifespan\
\
    def get_animated(self):\
        return self.animated\
\
    \
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim\
    \
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png\
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png\
debris_info = ImageInfo([320, 240], [640, 480])\
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")\
\
# nebula images - nebula_brown.png, nebula_blue.png\
nebula_info = ImageInfo([400, 300], [800, 600])\
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2013.png")\
\
# splash image\
splash_info = ImageInfo([200, 150], [400, 300])\
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")\
\
# ship image\
ship_info = ImageInfo([45, 45], [90, 90], 35)\
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")\
\
# missile image - shot1.png, shot2.png, shot3.png\
missile_info = ImageInfo([5,5], [10, 10], 3, 50)\
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")\
\
# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png\
asteroid_info = ImageInfo([45, 45], [90, 90], 40)\
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")\
\
# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png\
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)\
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")\
\
# sound assets purchased from sounddogs.com, please do not redistribute\
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")\
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")\
missile_sound.set_volume(.5)\
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")\
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")\
\
# helper functions to handle transformations\
def angle_to_vector(ang):\
    return [math.cos(ang), math.sin(ang)]\
\
def dist(p,q):\
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)\
\
# helper functions to manage groups\
def process_sprite_group(group,canvas):\
    expire_obj = set([])\
    for spr_obj in group:\
        spr_obj.draw(canvas)\
        if spr_obj.update():\
            expire_obj.add(spr_obj)\
    group.difference_update(expire_obj)\
            \
        \
def group_collide(group,other_obj):\
    global explosion_group\
    collide_group = set([])    \
    for obj1 in group:\
        if obj1.collide(other_obj):\
            collide_group.add(obj1)\
    if len(set(collide_group)) > 0:        \
        group.difference_update(collide_group)\
        for obj1 in collide_group:\
            explosion_group.add(Sprite(obj1.pos,[0,0], 0, 0, explosion_image, explosion_info,explosion_sound))\
        return True\
    return False            \
\
def group_group_collide(group1,group2):\
    collide_group = set([])\
    num_collision = 0\
    for obj1 in group1:\
        if group_collide(group2,obj1):\
            collide_group.add(obj1)  \
            num_collision += 10\
    if len(set(collide_group)) > 0:        \
        group1.difference_update(collide_group)\
    return num_collision            \
\
\
# Ship class\
class Ship:\
    def __init__(self, pos, vel, angle, image, info):\
        self.pos = [pos[0],pos[1]]\
        self.vel = [vel[0],vel[1]]\
        self.thrust = False\
        self.angle = angle\
        self.angle_vel = 0\
        self.image = image\
        self.image_center = info.get_center()\
        self.image_size = info.get_size()\
        self.radius = info.get_radius()\
   \
    def get_position(self):\
        return self.pos\
\
    def get_radius(self):\
        return self.radius    \
        \
    def draw(self,canvas):\
        canvas.draw_image(self.image, self.image_center, self.image_size,\
                   self.pos,self.image_size, self.angle)\
\
\
    def update(self):\
        self.angle += self.angle_vel\
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH\
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT\
        \
        if self.thrust:            \
            forward = angle_to_vector(self.angle)\
            self.vel[0] += forward[0]*C_ACCEL\
            self.vel[1] += forward[1]*C_ACCEL\
        self.vel[0] *= (1 - FRICTION)\
        self.vel[1] *= (1 - FRICTION)\
            \
    def rotate(self,direction):    \
        if direction == 0:\
            self.angle_vel= 0\
        self.angle_vel += direction * ANG_VEL\
        self.angle += self.angle_vel\
        \
    def warth_speed(self):         \
        self.thrust = True\
        self.image_center[0] = 135\
        ship_thrust_sound.play()\
        \
    def warth_off(self):\
        self.thrust = False\
        self.image_center[0] = 45\
        ship_thrust_sound.rewind()\
        \
    def shoot(self):\
        global missile_group\
        forward = angle_to_vector(self.angle) \
        position = [self.pos[0] + forward[0]*self.radius,\
                    self.pos[1] + forward[1]*self.radius]\
        velocity = [self.vel[0] + forward[0]*MISSILE_SPD,self.vel[1] + forward[1]*MISSILE_SPD]\
        missile_group.add(Sprite(position,velocity, self.angle, 0, missile_image, missile_info, missile_sound))\
    \
    \
# Sprite class\
class Sprite:\
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):\
        self.pos = [pos[0],pos[1]]\
        self.vel = [vel[0],vel[1]]\
        self.angle = ang\
        self.angle_vel = ang_vel\
        self.image = image\
        self.image_center = info.get_center()\
        self.image_size = info.get_size()\
        self.radius = info.get_radius()\
        self.lifespan = info.get_lifespan()\
        self.animated = info.get_animated()\
        self.age = 0\
        if sound:\
            sound.rewind()\
            sound.play()\
            \
    def get_position(self):\
        return self.pos\
\
    def get_radius(self):\
        return self.radius    \
   \
    def draw(self, canvas):\
        if self.animated:\
            self.image_center[0] = self.image_size[0]/2 + self.image_size[0] * self.age\
        canvas.draw_image(self.image,self.image_center, self.image_size,\
                   self.pos,self.image_size, self.angle)\
    \
    def update(self):\
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH\
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT\
        self.angle += self.angle_vel\
        self.age +=1\
        if self.age >= self.lifespan:\
            return True\
        return False\
        \
    def collide(self,other_obj):\
        distance = dist(self.get_position(),other_obj.get_position())\
        r1 = self.get_radius()\
        r2 = other_obj.get_radius()\
    \
        if distance <= r1+r2:\
            return True\
        else:\
            return False                    \
        \
\
# mouseclick handlers that reset UI and conditions whether splash image is drawn\
def click(pos):\
    global started,lives,score\
    center = [WIDTH / 2, HEIGHT / 2]\
    size = splash_info.get_size()\
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)\
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)\
    if (not started) and inwidth and inheight:\
        started = True\
        soundtrack.play()\
        lives = 3\
        score = 0\
\
        \
def draw(canvas):\
    global time,lives,score\
    \
    # animiate background\
    time += 1\
    wtime = (time / 4) % WIDTH\
    center = debris_info.get_center()\
    size = debris_info.get_size()\
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])\
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))\
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))\
    canvas.draw_text(" LIVES: " + str(lives),[100,100],24,"white")\
    canvas.draw_text(" SCORE: " + str(score),[WIDTH - 200,100],24,"white")\
    \
    # draw ship \
    my_ship.draw(canvas)\
    \
    # update ship and sprites\
    my_ship.update()\
    process_sprite_group(rock_group,canvas)\
    if group_collide(rock_group,my_ship):\
        lives -= 1\
    score += group_group_collide(missile_group,rock_group)\
    process_sprite_group(missile_group,canvas)\
    process_sprite_group(explosion_group,canvas)\
    \
    # draw splash screen if not started\
    if not started or lives <= 0:\
        canvas.draw_image(splash_image, splash_info.get_center(), \
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], \
                          splash_info.get_size())\
    # game over\
        if lives <= 0:\
            start()            \
\
# keyboard interaction handlers\
def keydown(key):   \
    if key == simplegui.KEY_MAP['right']:\
        my_ship.rotate(1)\
    if key == simplegui.KEY_MAP['left']:\
        my_ship.rotate(-1)\
    if key == simplegui.KEY_MAP['up']:\
        my_ship.warth_speed()\
    if key == simplegui.KEY_MAP['space']:\
        my_ship.shoot()\
\
\
def keyup(key):\
    if key == simplegui.KEY_MAP['right'] or simplegui.KEY_MAP['left']:\
        my_ship.rotate(0)\
    if key == simplegui.KEY_MAP['up']:\
        my_ship.warth_off()\
        \
\
def start():\
    global rock_group,missile_group,started,my_ship,level,explosion_group\
    my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0],0, ship_image, ship_info)\
    started = False\
    explosion_group = set([])\
    rock_group = set([])\
    missile_group = set([])\
    soundtrack.rewind()\
    if score > SCORE_THRESHOLD * level:\
        level +=1\
\
\
# timer handler that spawns a rock    \
def rock_spawner():\
    global rock_group\
    \
    if started:\
        velocity=[random.random()*random.randint(-1,1),random.random()*random.randint(-1,1)]\
        velocity[0] *= level*SPEED_SCORE_INC\
        velocity[1] *= level*SPEED_SCORE_INC\
        position=[random.randrange(0,WIDTH),random.randrange(0,HEIGHT)]\
        ship_pos=my_ship.get_position()\
    # while not generated at a safe distance keep generating\
        while dist(ship_pos,position) < GRACE_RANGE:\
            position=[random.randrange(0,WIDTH),random.randrange(0,HEIGHT)]\
        \
        if len(set(rock_group)) < 12:\
            rock_group.add(Sprite(position, velocity, random.random() * 0.1, \
                    random.random() * 0.1 * random.randint(-1,1), asteroid_image, asteroid_info))\
    \
# initialize frame\
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)\
\
# initialize ship and two sprites\
#my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0],0, ship_image, ship_info)\
#rock_group = set([])\
#missile_group = set([])\
lives = 3\
score = 0\
level=1\
start()\
# register handlers\
frame.set_draw_handler(draw)\
frame.set_keydown_handler(keydown)\
frame.set_keyup_handler(keyup)\
frame.set_mouseclick_handler(click)\
\
timer = simplegui.create_timer(1000.0, rock_spawner)\
\
# get things rolling\
timer.start()\
frame.start()\
}