# http://www.codeskulptor.org/#user25_knhjLTHBcx_5.py
# Mini-project #6 - Blackjack

#import simplegui
import Tkinter as tk
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
#card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-#assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
#card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-#assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
message = ""
score = [0,0]

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.cards=[]	# create Hand object

    def __str__(self):
        str_cards = "Hand contains: "
        for card in self.cards:
             str_cards += " " + str(card) 
        return str_cards        # return a string representation of a hand

    def add_card(self, card):
        self.cards.append(card)	# add a card object to a hand

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        no_ace = True
        hand_value = 0
        for card in self.cards:
            if card.get_rank() == 'A':
                no_ace = False
            hand_value += VALUES[card.get_rank()]
        if no_ace:
            return hand_value
        elif hand_value + 10 <= 21:
            return hand_value + 10
        else:
            return hand_value
        
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        x = pos[0]
        y = pos[1]
        n_card = 0
        for card in self.cards:
            card.draw(canvas,(x + n_card*CARD_SIZE[0],y))
            n_card +=1
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck=[]	# create a Deck object
        for s in SUITS:
            for r in RANKS:
                self.deck.append ( Card (s,r))
                

    def shuffle(self):
        # shuffle the deck 
        # use random.shuffle()
        random.shuffle(self.deck)

    def deal_card(self):
        last = len (self.deck) - 1
        return self.deck.pop(last)	# deal a card object from the deck
    
    def __str__(self):
    # return a string representing the deck
        str_cards = "Deck contains:"
        for card in self.deck:
             str_cards += " " + str(card) 
        return str_cards             


#define event handlers for buttons
def deal():
    global outcome, in_play, deck, player, dealer, message

    if in_play:
        score[0] += 1
        score[1] += 1
       
    deck= Deck()
    deck.shuffle()   
    in_play = True
    player = Hand()
    dealer = Hand()
    player.add_card(deck.deal_card())
    player.add_card(deck.deal_card())
    dealer.add_card(deck.deal_card())
    dealer.add_card(deck.deal_card())
    message = "Hit or Stand?"
    outcome = ""


def hit():
    global outcome, in_play, player, score, message
    # replace with your code below
 
    # if the hand is in play, hit the player
    if in_play:
        player.add_card(deck.deal_card())
        if player.get_value() >21:
    # if busted, assign a message to outcome, update in_play and score
            in_play = False 
            score[0] += 1
            score[1] += 1
            outcome = "Player is busted"
            message = "Another deal?"
    
def stand():
    global outcome, in_play, dealer,player,message
    # replace with your code below
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play:
        while dealer.get_value() < 17:
            dealer.add_card(deck.deal_card())
            if player.get_value() > 21:
    # assign a message to outcome, update in_play and score
                score[0] += 1
                score[1] += 1
                outcome = "House wins"
    if in_play:
        if player.get_value() > dealer.get_value():
            score[1] += 1
            in_play = False
            outcome = "Player wins"
        else:
            if dealer.get_value() <= 21:
                score[0] += 1
                score[1] += 1
                in_play = False        
                outcome = "House wins"
            else:
                score[1] += 1
                in_play = False
                outcome = "House is busted"
    message= "Another deal?"
    
# draw handler    
def draw(canvas):
    global player,dealer,outcome,message
    # test to make sure that card.draw works, replace with your code below
 
    canvas.draw_text("Blackjack",[100,40],36,"Yellow")    
    canvas.draw_text("Dealer", [100,100], 36, "White")
    canvas.draw_text(outcome,[300,275],36,"White")
    canvas.draw_text(message,[200,525],36,"White")
    score_str = "House: " + str(score[0]) + "/" + str(score[1])
    canvas.draw_text(score_str,[400,40],36,"White")
    score_str = "Player: " + str(score[1]-score[0]) + "/" + str(score[1])
    canvas.draw_text(score_str,[400,100],36,"White")
    dealer.draw(canvas, [100, 125])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE,
                          [100 + CARD_BACK_CENTER[0], 125 + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
    canvas.draw_text("Player", [100,325], 36, "White")
    player.draw(canvas, [100, 350])
    


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()
    


# remember to review the gradic rubric